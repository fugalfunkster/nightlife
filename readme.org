* Nightlife App

** Description
This app uses the Yelp API to show users a list of bars in their vicinity. Each bar also reports the  number of users who have "rsvp'd" for tonight. Authenticated users can "rsvp," indicating that they intend to go to a bar. I setup the Mongo database to automatically expire RSVPs daily. 

** Installation and Demonstration
+This app is currently deployed at https://nightlife-fugalfunkster.c9users.io/+

This app is no longer deployed, and this repo does not contain a required .env file. Github OAuth keys, and Yelp API keys are required to run this app. I can spin this up on Cloud9 by request.

** Dependencies 
- Node.js
- Express
- MongoDB / Mongoose
- Passport
- See also: package.json


** ToDo List [0/3]
- [ ] refactor routes
- [ ] refactor controllers
- [ ] refactor styles


** Objective: Build a full stack JavaScript app that is functionally similar to this: http://whatsgoinontonight.herokuapp.com/ and deploy it to Heroku. [4/4]
- [X] As an unauthenticated user, I can view all bars in my area.
  - [X] All bars means 10 bars...
- [X] As an authenticated user, I can add myself to a bar to indicate I am going there tonight.
  - [X] Users can see which bars they've confirmed
- [X] As an authenticated user, I can remove myself from a bar if I no longer want to go there.
- [X] As an unauthenticated user, when I login I should not have to search again.
  - [X] Location memory persists as session data
  - [X] Persisted data expires within 24 hours
   

** Design Ideas
*** use ajax except for auth
*** mongo permits data expiration: 
**** https://docs.mongodb.org/manual/tutorial/expire-data/ 
*** automatically generate list of bars? from ip? geolocate?
*** store location in session
*** YELP
**** https://www.yelp.com/developers/manage_api_keys
**** QUERY: https://api.yelp.com/v2/search/?location=97267&limit=10&category_filter=bars
**** {businesses[{name, url, image_url, id, is_closed}]}
**** npm install : https://github.com/olalonde/node-yelp



** User Permissions
- only authenticated users can rsvp


** M. V. C.

*** Views
- Home Page
  - nav bar (nightlife login/signup/logout)
  - headers 
  - location form
    - ajax get
    - update list
      - {imgURL, name, link, description, RSVP button, businessId}
  - rsvp button
    - ajax post businessId
    - update count callback

*** Controllers
- Server
  - receive location as GET
    - store data in req.sessions
    - request data from yelp API
    - format data from YELP
    - check database for matching business ids
    - add counts if any
    - RESPONSE transformed data
  - receive rsvp as POST
    - check database for matching business id
      - upsert id and count
      - increment
    - RESPONSE {businessId, updatedCount} to client side callback
- Client
  - session data available?
    - trigger location form
  - Location Form
    - submit location via ajax
    - recieve JSON data in callback
      - populate lists with data
  - RSVP button
    - state (going / not)
    - submit business id via ajax
    - recieve JSON data in callback
      - {businessId, updatedCount}
